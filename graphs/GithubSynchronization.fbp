INPORT=Dispatch.IN:IN
INPORT=Token.IN:TOKEN
OUTPORT=MergeContext.OUT:CONTEXT
OUTPORT=Errors.OUT:ERROR

'prepare,synchronize' -> ROUTES Dispatch(routers/GroupRouter)
Dispatch MISSED -> IN ShowErrors(core/Output)

# Preparation for sync: check local and remote situation
'repo' -> KEY GetRepo(objects/GetObjectKey)
Dispatch OUT[0] -> IN GetRepo
Token(core/Repeat) OUT -> TOKEN GetReference(github/GetReference)
GetRepo OUT -> REPOSITORY GetReference
GetReference REFERENCE -> REFERENCE CheckSyncState(ui/CheckSyncState)
'project' -> KEY GetProject(objects/GetObjectKey)
GetRepo OBJECT -> IN GetProject OUT -> PROJECT CheckSyncState
Token OUT -> TOKEN CheckSyncState
GetReference ERROR -> IN Errors(core/Merge)
CheckSyncState ERROR -> IN Errors
GetReference REFERENCE -> IN Kick(core/Kick)

# Different synchronization states
CheckSyncState NOOP -> IN MergeOps(core/Merge)
CheckSyncState LOCAL -> IN MergeOps
CheckSyncState REMOTE -> IN MergeOps
CheckSyncState BOTH -> IN MergeOps
'syncOperation' -> KEY OpsToContext(ui/SetToContext)
MergeOps OUT -> VALUE OpsToContext
MergeOps OUT -> START CreateCtx(ui/CreateContext) OUT -> CONTEXT OpsToContext
OpsToContext CONTEXT -> IN MergeContext(core/Merge)

# Actual synchronization operation(s)
Dispatch OUT[1] -> IN PreparePulls(ui/PreparePulls)
Token OUT -> TOKEN GetBlob(github/GetBlob)
PreparePulls OUT -> OPERATION BlobToEntry(ui/BlobToEntry)
PreparePulls REPOSITORY -> REPOSITORY GetBlob
PreparePulls SHA -> SHA GetBlob
GetBlob OUT -> BLOB BlobToEntry
BlobToEntry COMPONENT -> IN ShowErrors
BlobToEntry GRAPH -> IN ShowErrors
BlobToEntry ERROR -> IN ShowErrors
GetBlob ERROR -> IN Errors
