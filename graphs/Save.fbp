INPORT=HoldDb.DATA:DB
INPORT=Dispatch.IN:IN
OUTPORT=MergeContext.OUT:OUT

'component,graph,project,runtime' -> ROUTES Dispatch(routers/GroupRouter)

# Create transaction
HoldDb(core/Kick) OUT -> DB WriteTransaction(indexeddb/BeginTransaction)
'readwrite' -> DATA HoldMode(core/Kick) OUT -> MODE WriteTransaction
StoreName(core/Merge) OUT -> STORES WriteTransaction
Dispatch ROUTE -> IN HoldDb
Dispatch ROUTE -> IN HoldMode

# Component-specific handling
'components' -> DATA ComponentStore(core/Kick) OUT -> IN StoreName
Dispatch OUT[0] -> IN SplitComponent(core/Split) OUT -> IN ComponentStore 
SplitComponent OUT -> VALUE Put

# Graph-specific handling
'graphs' -> DATA GraphStore(core/Kick) OUT -> IN StoreName
Dispatch OUT[2] -> IN SplitGraph(core/Split) OUT -> IN GraphStore 
SplitGraph OUT -> VALUE Put

# Project-specific handling
'projects' -> DATA ProjectStore(core/Kick) OUT -> IN StoreName
Dispatch OUT[2] -> IN SplitProject(core/Split) OUT -> IN ProjectStore 
SplitProject OUT -> VALUE Put

# Runtime-specific handling
'runtimes' -> DATA RuntimeStore(core/Kick) OUT -> IN StoreName
Dispatch OUT[3] -> IN SplitRuntime(core/Split) OUT -> IN RuntimeStore 
SplitRuntime OUT -> VALUE Put

# Saving
StoreName OUT -> NAME Store(indexeddb/GetStore)
WriteTransaction TRANSACTION -> TRANSACTION Store STORE -> STORE Put(indexeddb/Put)

# Error handling
Put ERROR -> ERROR ErrorToCtx(ui/ErrorToContext) OUT -> IN MergeContext(core/Merge)
